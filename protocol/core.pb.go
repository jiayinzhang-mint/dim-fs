// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadStatusCode int32

const (
	UploadStatusCode_Unknown UploadStatusCode = 0
	UploadStatusCode_Ok      UploadStatusCode = 1
	UploadStatusCode_Failed  UploadStatusCode = 2
)

var UploadStatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var UploadStatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x UploadStatusCode) String() string {
	return proto.EnumName(UploadStatusCode_name, int32(x))
}

func (UploadStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type UploadFileResponse struct {
	Message              string           `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	UploadStatusCode     UploadStatusCode `protobuf:"varint,2,opt,name=UploadStatusCode,proto3,enum=protocol.UploadStatusCode" json:"UploadStatusCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UploadFileResponse) Reset()         { *m = UploadFileResponse{} }
func (m *UploadFileResponse) String() string { return proto.CompactTextString(m) }
func (*UploadFileResponse) ProtoMessage()    {}
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{1}
}

func (m *UploadFileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadFileResponse.Unmarshal(m, b)
}
func (m *UploadFileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadFileResponse.Marshal(b, m, deterministic)
}
func (m *UploadFileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadFileResponse.Merge(m, src)
}
func (m *UploadFileResponse) XXX_Size() int {
	return xxx_messageInfo_UploadFileResponse.Size(m)
}
func (m *UploadFileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadFileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadFileResponse proto.InternalMessageInfo

func (m *UploadFileResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UploadFileResponse) GetUploadStatusCode() UploadStatusCode {
	if m != nil {
		return m.UploadStatusCode
	}
	return UploadStatusCode_Unknown
}

func init() {
	proto.RegisterEnum("protocol.UploadStatusCode", UploadStatusCode_name, UploadStatusCode_value)
	proto.RegisterType((*Chunk)(nil), "protocol.Chunk")
	proto.RegisterType((*UploadFileResponse)(nil), "protocol.UploadFileResponse")
}

func init() { proto.RegisterFile("core.proto", fileDescriptor_f7e43720d1edc0fe) }

var fileDescriptor_f7e43720d1edc0fe = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x01, 0xd3, 0x76, 0x2a, 0x1a, 0xe6, 0x14, 0x82, 0x87, 0x92, 0x53, 0xf0, 0x90,
	0x43, 0x7b, 0x16, 0x0f, 0x81, 0xdc, 0xac, 0xb0, 0xa5, 0x0f, 0xb0, 0x26, 0xa3, 0x86, 0xac, 0x3b,
	0x61, 0x77, 0x5b, 0x5f, 0x5f, 0xdc, 0x12, 0x2b, 0xcd, 0x69, 0xf9, 0xe1, 0xdf, 0x6f, 0xbe, 0x19,
	0x80, 0x86, 0x2d, 0x95, 0x83, 0x65, 0xcf, 0xb8, 0x08, 0x4f, 0xc3, 0x3a, 0x7f, 0x82, 0x9b, 0xea,
	0xf3, 0x68, 0x7a, 0x4c, 0x61, 0x5e, 0xb1, 0xf1, 0x64, 0x7c, 0x2a, 0xd6, 0xa2, 0xb8, 0x95, 0x63,
	0xc4, 0x0c, 0x16, 0xef, 0x9d, 0xa6, 0x9d, 0xfa, 0xa2, 0x34, 0x5a, 0x8b, 0x62, 0x29, 0xff, 0x72,
	0x7e, 0x02, 0x3c, 0x0c, 0x9a, 0x55, 0x5b, 0x77, 0x9a, 0x24, 0xb9, 0x81, 0x8d, 0xa3, 0x5f, 0xd6,
	0x0b, 0x39, 0xa7, 0x3e, 0x28, 0xb0, 0x96, 0x72, 0x8c, 0x58, 0x43, 0x72, 0xee, 0xef, 0xbd, 0xf2,
	0x47, 0x57, 0x71, 0x7b, 0x66, 0xde, 0x6d, 0xb2, 0x72, 0x74, 0x2a, 0xaf, 0x1b, 0x72, 0xf2, 0xe7,
	0x71, 0x3b, 0xe5, 0xe0, 0x0a, 0xe6, 0x07, 0xd3, 0x1b, 0xfe, 0x36, 0xc9, 0x0c, 0x63, 0x88, 0x5e,
	0xfb, 0x44, 0x20, 0x40, 0x5c, 0xab, 0x4e, 0x53, 0x9b, 0x44, 0x9b, 0x1d, 0xac, 0x2a, 0xb6, 0xb4,
	0x27, 0x7b, 0xea, 0x1a, 0xc2, 0x67, 0x80, 0x8b, 0x3b, 0xde, 0x5f, 0xe6, 0x87, 0x83, 0x64, 0x0f,
	0xd7, 0x42, 0xff, 0x57, 0xcc, 0x67, 0x85, 0x78, 0x8b, 0x43, 0x61, 0xfb, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x8d, 0xd6, 0x83, 0xc0, 0x5a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (CoreService_UploadFileClient, error)
}

type coreServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoreServiceClient(cc *grpc.ClientConn) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (CoreService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoreService_serviceDesc.Streams[0], "/protocol.CoreService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceUploadFileClient{stream}
	return x, nil
}

type CoreService_UploadFileClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type coreServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *coreServiceUploadFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoreServiceServer is the server API for CoreService service.
type CoreServiceServer interface {
	UploadFile(CoreService_UploadFileServer) error
}

// UnimplementedCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (*UnimplementedCoreServiceServer) UploadFile(srv CoreService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

func RegisterCoreServiceServer(s *grpc.Server, srv CoreServiceServer) {
	s.RegisterService(&_CoreService_serviceDesc, srv)
}

func _CoreService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServiceServer).UploadFile(&coreServiceUploadFileServer{stream})
}

type CoreService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type coreServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *coreServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreServiceUploadFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _CoreService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "core.proto",
}
